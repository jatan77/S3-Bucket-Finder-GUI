#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    May 31, 2020 02:26:36 AM IST  platform: Linux

import sys
import requests
import time
import os
import tldextract
import subprocess as sp

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import mainwin_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    mainwin_support.set_Tk_var()
    top = Toplevel1 (root)
    mainwin_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    mainwin_support.set_Tk_var()
    top = Toplevel1 (w)
    mainwin_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {DejaVu Sans} -size 12"
        font13 = "-family {Latin Modern Sans Demi Cond} -size 18 "  \
            "-weight bold"
        font14 = "-family {Latin Modern Mono Caps} -size 15 -weight "  \
            "bold"
        font17 = "-family {DejaVu Sans} -size 10"
        font18 = "-family {DejaVu Sans} -size 12 -weight bold"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("993x660+202+71")
        top.minsize(1, 1)
        top.maxsize(1425, 870)
        top.resizable(1, 1)
        top.title("New Toplevel")
  
        
        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.816, rely=0.818, height=41, width=141)
        self.Button1.configure(command=mainwin_support.selectfile)
        self.Button1.configure(font=font10)
        self.Button1.configure(text='''Select wordlist''')

        self.Listbox1 = tk.Listbox(top)
        self.Listbox1.place(relx=0.05, rely=0.833, relheight=0.050
                , relwidth=0.748)
        self.Listbox1.configure(background="black")
        self.Listbox1.configure(foreground="green")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(listvariable=mainwin_support.lista)
        
        def runfinder():
            update_lis()
            file = open("g.txt","r") 
            Counter = 0
            Content = file.read() 
            CoList = Content.split("\n") 
            for i in CoList: 
                if i: 
                    Counter += 1
            global cn
            cn = Counter
            print(cn)
            self.Label19.configure(text=Counter)
            self.Listbox1.itemconfig(0, foreground="green")
            print('mainwin_support.runfinder')
            with open(mainwin_support.filename,'r') as f:
                with open("temp.txt", "w") as f1:
                    for line in f:
                        rep=line.replace('.', '-')
                        f1.write(rep)   
            with open("temp.txt",'r') as f:
                for line in f:
                    for word in line.split():
                           url="https://"+word+".s3.amazonaws.com/"
                           file = open('temp-url.txt','a') 
                           file.write(url+"\n") 
                           file.close() 
            global cont;               
            update_lis()
            cod1 = "python3 Multithread.py"
            print("[*]Running :"+cod1);
            sp.Popen('gnome-terminal -e "'+cod1+'"', shell=True)
            sys.stdout.flush()
        def update_lis():
                file = open("temp-result.txt","r") 
                Counter = 0
                Content = file.read() 
                CoList = Content.split("\n") 
                for i in CoList: 
                    if i: 
                        Counter += 1
                self.Label7.configure(text=Counter)
                file = open("c.txt","r") 
                Counter = 0
                Content = file.read() 
                CoList = Content.split("\n") 
                for i in CoList: 
                    if i: 
                        Counter += 1
                self.Label20.configure(text=Counter)       
                self.Scrolledlistbox1.delete(0,tk.END)
                with open("temp-result.txt",'r') as f:
                    for line in f:
                            self.Scrolledlistbox1.insert(tk.END,line)
                            self.Scrolledlistbox1.itemconfigure(tk.END,foreground="green")
                self.Scrolledlistbox1.after(2000, update_lis)
                
        self.Button2 = tk.Button(top)
        self.Button2.place(relx=0.420, rely=0.894, height=41, width=91)
        self.Button2.configure(command=runfinder)
        self.Button2.configure(font=font14)
        self.Button2.configure(text='''Run''')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.352, rely=-0.015, height=51, width=325)
        self.Label1.configure(font=font13)
        self.Label1.configure(text='''Public S3 bucket Finder''')

        self.Scrolledlistbox1 = ScrolledListBox(top)
        self.Scrolledlistbox1.place(relx=0.05, rely=0.121, relheight=0.662
                , relwidth=0.751)
        self.Scrolledlistbox1.configure(background="black")
        self.Scrolledlistbox1.configure(cursor="xterm")
        self.Scrolledlistbox1.configure(font="TkFixedFont")
        self.Scrolledlistbox1.configure(highlightcolor="#d9d9d9")
        self.Scrolledlistbox1.configure(selectbackground="#c4c4c4")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.05, rely=0.091, height=21, width=100)
        self.Label2.configure(text='''Total Bucket ''')
        
        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.150, rely=0.091, height=21, width=49)
        self.Label7.configure(text='''-''')
        
        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.200, rely=0.091, height=21, width=49)
        self.Label6.configure(text='''Found''')
        
        
        self.Label9 = tk.Label(top)
        self.Label9.place(relx=0.250, rely=0.085, height=21, width=150)
        self.Label9.configure(text='''Total Words - ''')
        
        self.Label19 = tk.Label(top)
        self.Label19.place(relx=0.400, rely=0.085, height=21, width=50)
        self.Label19.configure(text='''_''')
        
        self.Label21 = tk.Label(top)
        self.Label21.place(relx=0.320, rely=0.050, height=21, width=60)
        self.Label21.configure(text='''Scanned ''')
        
        self.Label20 = tk.Label(top)
        self.Label20.place(relx=0.400, rely=0.050, height=21, width=50)
        self.Label20.configure(text='''_''')
        
        def downloadme():
            print('downloadme')
            sels = self.Scrolledlistbox1.get(self.Scrolledlistbox1.curselection())
            subd = tldextract.extract(sels)
            a_string = subd.subdomain
            split_string = a_string.split(".", 1)
            c = split_string[0]
            b=c.replace(" ","")
            os.mkdir(b)
            command = "aws s3 sync s3://"+b+" ./"+b+"" 
            print(command)
            os.system(command)
            print("*****") 
            print("Done")
            print("*****")
            sys.stdout.flush()
        self.Button3 = tk.Button(top)
        self.Button3.place(relx=0.836, rely=0.227, height=41, width=121)
        self.Button3.configure(command=downloadme)
        self.Button3.configure(font=font17)
        self.Button3.configure(text='''Download''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.836, rely=0.182, height=31, width=129)
        self.Label3.configure(font=font10)
        self.Label3.configure(text='''Selected bucket''')
        
        def downloadall():
            print('mainwin_support.downloadall')
            for i, listbox_entry in enumerate(self.Scrolledlistbox1.get(0, tk.END)):
                print('downloadme'+str(i))
                sels = self.Scrolledlistbox1.get(i)
                print('text-->'+str(sels))
                subd = tldextract.extract(sels)
                a_string = subd.subdomain
                split_string = a_string.split(".", 1)
                c = split_string[0]
                b=c.replace(" ","")
                os.mkdir(b)
                command = "aws s3 sync s3://"+b+" ./"+b+"" 
                print(command)
                os.system(command) 
           
            print("*****") 
            print("Done")
            print("*****")
            sys.stdout.flush()

        def cler():
            file = open('temp-url.txt','w') 
            file.write("") 
            file.close()
            file = open('temp.txt','w') 
            file.write("") 
            file.close()
            file = open('temp-result.txt','w') 
            file.write("") 
            file.close()
            file = open('temp-url.txt','w') 
            file.write("") 
            file.close()
            file = open('c.txt','w') 
            file.write("") 
            file.close()
            print("cleared")
            
            
            
        self.Button4 = tk.Button(top)
        self.Button4.place(relx=0.836, rely=0.545, height=41, width=123)
        self.Button4.configure(command=downloadall)
        self.Button4.configure(font=font10)
        self.Button4.configure(text='''Download all''')

        self.Button5 = tk.Button(top)
        self.Button5.place(relx=0.836, rely=0.350, height=41, width=123)
        self.Button5.configure(command=cler)
        self.Button5.configure(font=font10)
        self.Button5.configure(text='''Clear all''')

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.483, rely=0.076, height=21, width=164)
        self.Label4.configure(text='''By : Jatan vora''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.463, rely=0.045, height=21, width=104)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(text='''Version - 2.0''')
        


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





